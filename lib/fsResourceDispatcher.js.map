{"version":3,"sources":["../src/fsResourceDispatcher.js"],"names":["require","makeDispatcher","dfs","path","mimeType","module","exports","resourcePath","params","dispatcher","renderer","request","response","afterPathname","fileStream","resolve","split","stat","stats","etag","size","toString","Date","parse","mtime","headers","writeHead","createReadStream","head","lookup","inline","basename"],"mappings":"AAAA;;;;AACAA,QAAQ,eAAR;;AAEA,IAAMC,iBAAiBD,QAAQ,cAAR,EAAwBC,cAA/C;AAAA,IACIC,MAAMF,QAAQ,gBAAR,CADV;AAAA,IAEIG,OAAOH,QAAQ,MAAR,CAFX;AAAA,IAGII,WAAWJ,QAAQ,UAAR,CAHf;;AAKA;;;;;;;;;;;AAWAK,OAAOC,OAAP,GAAiB,UAASC,YAAT,EAAuBC,MAAvB,EAA+B;AAC5C,QAAIC,aAAaR,eAAe;AAC5BS;AAAA,iEAAU,iBAAeC,OAAf,EAAwBC,QAAxB,EAAkCC,aAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AACFC,0CADE,GACW,IADX;AAEFP,4CAFE,GAEaJ,KAAKY,OAAL,CAAaR,YAAb,EAA2BM,cAAcG,KAAd,CAAoB,GAApB,CAA3B,CAFb;AAAA;AAAA,uCAGYd,IAAIe,IAAJ,CAASV,YAAT,CAHZ;;AAAA;AAGFW,qCAHE;AAIFC,oCAJE,GAIKD,MAAME,IAAN,CAAWC,QAAX,CAAoB,EAApB,IAA0B,GAA1B,GAAgCC,KAAKC,KAAL,CAAWL,MAAMM,KAAjB,EAAwBH,QAAxB,CAAiC,EAAjC,CAJrC;;AAKN,oCAAIV,QAAQc,OAAR,CAAgB,eAAhB,MAAqCN,IAAzC,EAA+C;AAC3CP,6CAASc,SAAT,CAAmB,GAAnB,EAAwB;AACpB,0DAAkB;AADE,qCAAxB;AAGH,iCAJD,MAIO;AACHZ,iDAAaZ,IAAIyB,gBAAJ,CAAqBpB,YAArB,CAAb;AACIqB,wCAFD,GAEQ;AACP,0DAAkBV,MAAME,IADjB;AAEP,wDAAgBhB,SAASyB,MAAT,CAAgBtB,YAAhB,KAAiC,0BAF1C;AAGP,gDAAQY;AAHD,qCAFR;;AAOH,wCAAI,KAAKW,MAAT,EAAiB;AACbF,6CAAK,qBAAL,IAA8B,uBAAuBzB,KAAK4B,QAAL,CAAcxB,YAAd,CAAvB,GAAqD,GAAnF;AACH;AACDK,6CAASc,SAAT,CAAmB,GAAnB,EAAwBE,IAAxB;AACH;AApBK,iEAqBCd,UArBD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAD4B,KAAf,CAAjB;AAyBH,CA1BD","file":"fsResourceDispatcher.js","sourcesContent":["\"use strict\";\nrequire('gulp-polyfill');\n\nconst makeDispatcher = require('./Dispatcher').makeDispatcher,\n    dfs = require('./utils/dfs.js'),\n    path = require('path'),\n    mimeType = require('mimetype');\n\n/**\n * This function create a dipartcher. A dispatcher is routing object that reads incoming http requests and\n * writes to an http response.\n * @param params. Configuration object whose attributes are:\n *  - resourcePath::string Where the resources are stored .\n *    afterPathName is the url pathname minus the dispatcher routing path\n *  - requestFilter::<function(request::http.IncomingMessage)> Async Callback called every time the dispatcher is traversed.\n *    Request filter is the ideal place to put authorization to protected resources.\n *  - responseFilter::<function(request::http.IncomingMessage,response::http.ServerResponse)> Like params.requestFilter but called after rendering.\n * @returns {Dispatcher}\n */\nmodule.exports = function(resourcePath, params) {\n    let dispatcher = makeDispatcher({\n        renderer: async function(request, response, afterPathname) {\n            let fileStream = null,\n                resourcePath = path.resolve(resourcePath, afterPathname.split('/')),\n                stats = await dfs.stat(resourcePath),\n                etag = stats.size.toString(16) + '-' + Date.parse(stats.mtime).toString(16);\n            if (request.headers['if-none-match'] === etag) {\n                response.writeHead(304, {\n                    'Content-Length': 0\n                });\n            } else {\n                fileStream = dfs.createReadStream(resourcePath);\n                let head = {\n                    'Content-Length': stats.size,\n                    'Content-Type': mimeType.lookup(resourcePath) || \"application/octet-stream\",\n                    'ETag': etag\n                };\n                if (this.inline) {\n                    head['Content-Disposition'] = 'inline; filename=\"' + path.basename(resourcePath) + '\"';\n                }\n                response.writeHead(200, head);\n            }\n            return fileStream;\n        }\n    });\n};"]}