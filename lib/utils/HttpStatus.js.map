{"version":3,"sources":["utils/HttpStatus.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;AAEb,IAAI,OAAO,GAAG;AACV,SAAK,EAAE,UAAU;AACjB,SAAK,EAAE,qBAAqB;AAC5B,SAAK,EAAE,YAAY;AACnB,SAAK,EAAE,IAAI;AACX,SAAK,EAAE,SAAS;AAChB,SAAK,EAAE,UAAU;AACjB,SAAK,EAAE,+BAA+B;AACtC,SAAK,EAAE,YAAY;AACnB,SAAK,EAAE,eAAe;AACtB,SAAK,EAAE,iBAAiB;AACxB,SAAK,EAAE,cAAc;AACrB,SAAK,EAAE,SAAS;AAChB,SAAK,EAAE,kBAAkB;AACzB,SAAK,EAAE,mBAAmB;AAC1B,SAAK,EAAE,OAAO;AACd,SAAK,EAAE,WAAW;AAClB,SAAK,EAAE,cAAc;AACrB,SAAK,EAAE,WAAW;AAClB,SAAK,EAAE,oBAAoB;AAC3B,SAAK,EAAE,aAAa;AACpB,SAAK,EAAE,cAAc;AACrB,SAAK,EAAE,kBAAkB;AACzB,SAAK,EAAE,WAAW;AAClB,SAAK,EAAE,WAAW;AAClB,SAAK,EAAE,oBAAoB;AAC3B,SAAK,EAAE,gBAAgB;AACvB,SAAK,EAAE,+BAA+B;AACtC,SAAK,EAAE,iBAAiB;AACxB,SAAK,EAAE,UAAU;AACjB,SAAK,EAAE,MAAM;AACb,SAAK,EAAE,iBAAiB;AACxB,SAAK,EAAE,qBAAqB;AAC5B,SAAK,EAAE,mBAAmB;AAC1B,SAAK,EAAE,cAAc;AACrB,SAAK,EAAE,wBAAwB;AAC/B,SAAK,EAAE,uBAAuB;AAC9B,SAAK,EAAE,oBAAoB;AAC3B,SAAK,EAAE,sBAAsB;AAC7B,SAAK,EAAE,QAAQ;AACf,SAAK,EAAE,mBAAmB;AAC1B,SAAK,EAAE,kBAAkB;AACzB,SAAK,EAAE,uBAAuB;AAC9B,SAAK,EAAE,mBAAmB;AAC1B,SAAK,EAAE,iCAAiC;AACxC,SAAK,EAAE,uBAAuB;AAC9B,SAAK,EAAE,iBAAiB;AACxB,SAAK,EAAE,aAAa;AACpB,SAAK,EAAE,qBAAqB;AAC5B,SAAK,EAAE,kBAAkB;AACzB,SAAK,EAAE,4BAA4B;AACnC,SAAK,EAAE,sBAAsB;AAC7B,SAAK,EAAE,iCAAiC;CAC3C,CAAC;;;;;;;IAMI,UAAU;iBAAV,UAAU;;eACJ,oBAAG;AACP,gBAAI,IAAI,GAAG,kBAAkB,CAAC;AAC9B,gCAAkB,IAAI,OAAI;SAC7B;;;;;;;;aAUO,eAAG;AACP,mBAAO,IAAI,CAAC,WAAW,CAAC;SAC3B;;;;;;;;aAMS,eAAG;AACT,mBAAO,IAAI,CAAC,OAAO,CAAC;SACvB;;;;;;;;;eAlB0B,8BAAC,IAAI,EAAE;AAC9B,mBAAO,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;SACnC;;;AAuBU,aA/BT,UAAU,CA+BA,IAAI,EAAE,MAAM,EAAE;8BA/BxB,UAAU;;AAgCR,YAAI,OAAO,GAAG,MAAM,IAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,SAAS,CAAC;AAC9D,YAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;AAClC,YAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;;WAnCC,UAAU;;;AAqChB,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC","file":"utils/HttpStatus.js","sourcesContent":["\"use strict\";\n\nlet _status = {\n    \"100\": \"Continue\",\n    \"101\": \"Switching Protocols\",\n    \"102\": \"Processing\",\n    \"200\": \"OK\",\n    \"201\": \"Created\",\n    \"202\": \"Accepted\",\n    \"203\": \"Non-Authoritative Information\",\n    \"204\": \"No Content\",\n    \"205\": \"Reset Content\",\n    \"206\": \"Partial Content\",\n    \"207\": \"Multi-Status\",\n    \"299\": \"Aborted\",\n    \"300\": \"Multiple Choices\",\n    \"301\": \"Moved Permanently\",\n    \"302\": \"Found\",\n    \"303\": \"See Other\",\n    \"304\": \"Not Modified\",\n    \"305\": \"Use Proxy\",\n    \"307\": \"Temporary Redirect\",\n    \"400\": \"Bad Request\",\n    \"401\": \"Unauthorized\",\n    \"402\": \"Payment Required\",\n    \"403\": \"Forbidden\",\n    \"404\": \"Not Found\",\n    \"405\": \"Method Not Allowed\",\n    \"406\": \"Not Acceptable\",\n    \"407\": \"Proxy Authentication Required\",\n    \"408\": \"Request Timeout\",\n    \"409\": \"Conflict\",\n    \"410\": \"Gone\",\n    \"411\": \"Length Required\",\n    \"412\": \"Precondition Failed\",\n    \"413\": \"Payload Too Large\",\n    \"414\": \"URI Too Long\",\n    \"415\": \"Unsupported Media Type\",\n    \"416\": \"Range Not Satisfiable\",\n    \"417\": \"Expectation Failed\",\n    \"422\": \"Unprocessable Entity\",\n    \"423\": \"Locked\",\n    \"424\": \"Failed Dependency\",\n    \"426\": \"Upgrade Required\",\n    \"428\": \"Precondition Required\",\n    \"429\": \"Too Many Requests\",\n    \"431\": \"Request Header Fields Too Large\",\n    \"500\": \"Internal Server Error\",\n    \"501\": \"Not Implemented\",\n    \"502\": \"Bad Gateway\",\n    \"503\": \"Service Unavailable\",\n    \"504\": \"Gateway Time-out\",\n    \"505\": \"HTTP Version Not Supported\",\n    \"507\": \"Insufficient Storage\",\n    \"511\": \"Network Authentication Required\"\n};\n\n/**\n * Utils class to to represent http status for ejs2.\n * @class\n */\nclass HttpStatus {\n    toString() {\n        let name = 'utils/HttpStatus';\n        return `[object ${name}]`;\n    }\n\n    static getStatusDescription(code) {\n        return _status[code.toString()];\n    }\n\n    /**\n     * Http status code\n     * @returns {int}\n     */\n    get code() {\n        return this._statusCode;\n    }\n\n    /**\n     * Status description. if not set in constructor the HTTP error transcodification is used.\n     * @returns {String }\n     */\n    get reason() {\n        return this._reason;\n    }\n\n    /**\n     * Class contructor\n     * @param {!int} code Required parameter, should be one of the http status codes\n     * @param {String} reason Optional pearameter that indicates the description of the status.\n     */\n    constructor(code, reason) {\n        let message = reason || _status[code.toString()] || \"Unknown\";\n        this._statusCode = parseInt(code);\n        this._reason = message;\n    }\n}\nmodule.exports = HttpStatus;"],"sourceRoot":"../src"}