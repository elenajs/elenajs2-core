{"version":3,"sources":["utils/dfs.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;IAClB,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAE/B,OAAO,CAAC,UAAU,CAAC,CAAC;;AAEpB,SAAS,UAAU,CAAC,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE;;AAEnC,QAAI,GAAG,IAAI,IAAI,IAAI,CAAC;AACpB,WAAO,OAAO,GAAG,YAAY;AACzB,YAAI,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACjD,eAAO,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE;AAClC,gBAAI,CAAC,IAAI,CAAC,YAAY;AAClB,oBAAI,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAC9C,uBAAO,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;aACtD,CAAC,CAAC;AACH,cAAE,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SACxB,CAAC,CAAC;KACN,GAAG,YAAY;AACZ,YAAI,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACjD,eAAO,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE,MAAM,EAAE;AAC1C,gBAAI,CAAC,IAAI,CAAC,YAAY;AAClB,oBAAI,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;oBACzC,GAAG,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;AACpB,oBAAI,GAAG,EAAE;AACL,0BAAM,CAAC,GAAG,CAAC,CAAC;iBACf,MAAM;AACH,2BAAO,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;iBACtD;aACJ,CAAC,CAAC;AACH,cAAE,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SACxB,CAAC,CAAC;KACN,CAAC;CACL;;AAED,IAAI,GAAG,GAAG,EAAE;IACR,kBAAkB,GAAG,CAAC,QAAQ,CAAC,CAAC;;AAEpC,KAAK,IAAI,YAAY,IAAK,EAAE,EAAE;AAC1B,QAAI,YAAY,GAAG,EAAE,CAAC,YAAY,CAAC,CAAC;AACpC,QAAI,YAAY,IAAI,YAAY,EAAE;AAC9B,YAAI,OAAO,YAAY,KAAK,UAAU,IAAI,CAAC,qCAAqC,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;;AACjG,eAAG,CAAC,YAAY,CAAC,GAAG,UAAU,CAAC,YAAY,EAAE,EAAE,EAAE,CAAC,kBAAkB,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;SAC/F,MAAM;AACH,mBAAG,CAAC,YAAY,CAAC,GAAG,YAAY,CAAC;aACpC;KACJ;CACJ;AACD,GAAG,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC3C,GAAG,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC;AAChC,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC","file":"utils/dfs.js","sourcesContent":["\"use strict\";\n\nlet fs = require('fs'),\n    mkdirp = require('mkdirp');\n\nrequire('fs-extra');\n\nfunction asDeferred(fn, self, noError) {\n\n    self = self || this;\n    return noError ? function () {\n        let args = Array.prototype.slice.call(arguments);\n        return new Promise(function (resolve) {\n            args.push(function () {\n                var a = Array.prototype.slice.call(arguments);\n                resolve(a.length > 1 ? a : a.length ? a[0] : null);\n            });\n            fn.apply(self, args);\n        });\n    } : function () {\n        let args = Array.prototype.slice.call(arguments);\n        return new Promise(function (resolve, reject) {\n            args.push(function () {\n                var a = Array.prototype.slice.call(arguments),\n                    err = a.shift();\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(a.length > 1 ? a : a.length ? a[0] : null);\n                }\n            });\n            fn.apply(self, args);\n        });\n    };\n}\n\nlet dfs = {},\n    singleArgFunctions = ['exists'];\n\nfor (let functionName  in fs) {\n    let functionCode = fs[functionName];\n    if (functionName && functionCode) {\n        if (typeof functionCode === 'function' && !/(^[_A-Z]|^create|^(un)?watch|Sync$)/.test(functionName)) { // It is something we want to convert\n            dfs[functionName] = asDeferred(functionCode, fs, ~singleArgFunctions.indexOf(functionName)); // Create a deferred\n        } else {\n            dfs[functionName] = functionCode; // Leave alone\n        }\n    }\n}\ndfs['mkdirp'] = asDeferred(mkdirp, mkdirp);\ndfs['mkdirpSync'] = mkdirp.sync;\nmodule.exports = dfs;"],"sourceRoot":"/source/"}