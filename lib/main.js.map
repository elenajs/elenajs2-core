{"version":3,"sources":["../src/main.js"],"names":["require","Dispatcher","makeFsDispatcher","module","exports","addDispatcher","dispatcher","parent","nodeName","request","response","dispatch","makeDispatcher"],"mappings":"AAAA;;AACAA,QAAQ,eAAR;;AAEA,IAAMC,aAAaD,QAAQ,cAAR,CAAnB;AAAA,IACIE,mBAAmBF,QAAQ,wBAAR,CADvB;;AAGA;;;;;;;AAOAG,OAAOC,OAAP,CAAeC,aAAf,GAA+B,UAASC,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,EAAuC;AAClED,cAAUA,OAAOF,aAAP,CAAqBG,QAArB,EAA+BF,UAA/B,CAAV;AACA,WAAO,UAACG,OAAD,EAAUC,QAAV,EAAuB;AAC1BJ,mBAAWK,QAAX,CAAoBF,OAApB,EAA6BC,QAA7B;AACH,KAFD;AAGH,CALD;;AAOAP,OAAOC,OAAP,CAAeQ,cAAf,GAAgCX,WAAWW,cAA3C;AACAT,OAAOC,OAAP,CAAeF,gBAAf,GAAkCA,gBAAlC","file":"main.js","sourcesContent":["\"use strict\";\nrequire('gulp-polyfill');\n\nconst Dispatcher = require('./Dispatcher'),\n    makeFsDispatcher = require('./fsResourceDispatcher');\n\n/**\n * This method is used to create a dispatcher chain\n * @param parent the parent dispatcher\n * @param nodeName Used to create a the path where the dispatcher will be attached. The path is created traversing the dispatchers chain\n * @param dispatcher The dispatcher that is to be associated to the given node.\n * @returns {function(request::http.IncomingMessage, response::http.ServerResponse)} Callback that can be used as a callback for http.createServer\n */\nmodule.exports.addDispatcher = function(dispatcher, parent, nodeName) {\n    parent && parent.addDispatcher(nodeName, dispatcher);\n    return (request, response) => {\n        dispatcher.dispatch(request, response);\n    }\n};\n\nmodule.exports.makeDispatcher = Dispatcher.makeDispatcher;\nmodule.exports.makeFsDispatcher = makeFsDispatcher;"]}